Terminals unused in grammar

   SEMICOLON
   COLON
   COMMA
   ASSIGN
   RETURN
   MOD


State 20 conflicts: 1 shift/reduce


Grammar

    0 $accept: input $end

    1 input: %empty
    2      | input line

    3 line: exp EQUAL END
    4     | var END
    5     | term END
    6     | comp END
    7     | bool-expr END

    8 bool-expr: relation-and-expr
    9          | relation-and-expr AND relation-and-expr

   10 relation-and-expr: relation-expr
   11                  | relation-expr AND relation-expr

   12 relation-expr: NOT relation-expr
   13              | exp comp exp
   14              | L_PAREN bool-expr R_PAREN
   15              | TRUE
   16              | FALSE

   17 exp: NUMBER
   18    | exp PLUS exp
   19    | exp MINUS exp
   20    | exp MULT exp
   21    | exp DIV exp
   22    | MINUS exp
   23    | L_PAREN exp R_PAREN

   24 term: UMINUS var
   25     | UMINUS exp

   26 var: IDENT
   27    | IDENT L_SQUARE_BRACKET exp R_SQUARE_BRACKET

   28 comp: EQ
   29     | NEQ
   30     | LT
   31     | GT
   32     | LTE
   33     | GTE


Terminals, with rules where they appear

$end (0) 0
error (256)
MULT (258) 20
DIV (259) 21
PLUS (260) 18
MINUS (261) 19 22
EQUAL (262) 3
L_PAREN (263) 14 23
R_PAREN (264) 14 23
L_SQUARE_BRACKET (265) 27
R_SQUARE_BRACKET (266) 27
NOT (267) 12
END (268) 3 4 5 6 7
EQ (269) 28
NEQ (270) 29
LT (271) 30
GT (272) 31
LTE (273) 32
GTE (274) 33
SEMICOLON (275)
COLON (276)
COMMA (277)
ASSIGN (278)
TRUE (279) 15
FALSE (280) 16
RETURN (281)
MOD (282)
AND (283) 9 11
NUMBER (284) 17
IDENT (285) 26 27
UMINUS (286) 24 25


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
input (33)
    on left: 1 2, on right: 0 2
line (34)
    on left: 3 4 5 6 7, on right: 2
bool-expr (35)
    on left: 8 9, on right: 7 14
relation-and-expr (36)
    on left: 10 11, on right: 8 9
relation-expr (37)
    on left: 12 13 14 15 16, on right: 10 11 12
exp (38)
    on left: 17 18 19 20 21 22 23, on right: 3 13 18 19 20 21 22 23
    25 27
term (39)
    on left: 24 25, on right: 5
var (40)
    on left: 26 27, on right: 4 24
comp (41)
    on left: 28 29 30 31 32 33, on right: 6 13


State 0

    0 $accept: . input $end

    $default  reduce using rule 1 (input)

    input  go to state 1


State 1

    0 $accept: input . $end
    2 input: input . line

    $end     shift, and go to state 2
    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NOT      shift, and go to state 5
    EQ       shift, and go to state 6
    NEQ      shift, and go to state 7
    LT       shift, and go to state 8
    GT       shift, and go to state 9
    LTE      shift, and go to state 10
    GTE      shift, and go to state 11
    TRUE     shift, and go to state 12
    FALSE    shift, and go to state 13
    NUMBER   shift, and go to state 14
    IDENT    shift, and go to state 15
    UMINUS   shift, and go to state 16

    line               go to state 17
    bool-expr          go to state 18
    relation-and-expr  go to state 19
    relation-expr      go to state 20
    exp                go to state 21
    term               go to state 22
    var                go to state 23
    comp               go to state 24


State 2

    0 $accept: input $end .

    $default  accept


State 3

   22 exp: MINUS . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 26


State 4

   14 relation-expr: L_PAREN . bool-expr R_PAREN
   23 exp: L_PAREN . exp R_PAREN

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NOT      shift, and go to state 5
    TRUE     shift, and go to state 12
    FALSE    shift, and go to state 13
    NUMBER   shift, and go to state 14

    bool-expr          go to state 27
    relation-and-expr  go to state 19
    relation-expr      go to state 20
    exp                go to state 28


State 5

   12 relation-expr: NOT . relation-expr

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NOT      shift, and go to state 5
    TRUE     shift, and go to state 12
    FALSE    shift, and go to state 13
    NUMBER   shift, and go to state 14

    relation-expr  go to state 29
    exp            go to state 30


State 6

   28 comp: EQ .

    $default  reduce using rule 28 (comp)


State 7

   29 comp: NEQ .

    $default  reduce using rule 29 (comp)


State 8

   30 comp: LT .

    $default  reduce using rule 30 (comp)


State 9

   31 comp: GT .

    $default  reduce using rule 31 (comp)


State 10

   32 comp: LTE .

    $default  reduce using rule 32 (comp)


State 11

   33 comp: GTE .

    $default  reduce using rule 33 (comp)


State 12

   15 relation-expr: TRUE .

    $default  reduce using rule 15 (relation-expr)


State 13

   16 relation-expr: FALSE .

    $default  reduce using rule 16 (relation-expr)


State 14

   17 exp: NUMBER .

    $default  reduce using rule 17 (exp)


State 15

   26 var: IDENT .
   27    | IDENT . L_SQUARE_BRACKET exp R_SQUARE_BRACKET

    L_SQUARE_BRACKET  shift, and go to state 31

    $default  reduce using rule 26 (var)


State 16

   24 term: UMINUS . var
   25     | UMINUS . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14
    IDENT    shift, and go to state 15

    exp  go to state 32
    var  go to state 33


State 17

    2 input: input line .

    $default  reduce using rule 2 (input)


State 18

    7 line: bool-expr . END

    END  shift, and go to state 34


State 19

    8 bool-expr: relation-and-expr .
    9          | relation-and-expr . AND relation-and-expr

    AND  shift, and go to state 35

    $default  reduce using rule 8 (bool-expr)


State 20

   10 relation-and-expr: relation-expr .
   11                  | relation-expr . AND relation-expr

    AND  shift, and go to state 36

    AND       [reduce using rule 10 (relation-and-expr)]
    $default  reduce using rule 10 (relation-and-expr)


State 21

    3 line: exp . EQUAL END
   13 relation-expr: exp . comp exp
   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp

    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    EQUAL  shift, and go to state 41
    EQ     shift, and go to state 6
    NEQ    shift, and go to state 7
    LT     shift, and go to state 8
    GT     shift, and go to state 9
    LTE    shift, and go to state 10
    GTE    shift, and go to state 11

    comp  go to state 42


State 22

    5 line: term . END

    END  shift, and go to state 43


State 23

    4 line: var . END

    END  shift, and go to state 44


State 24

    6 line: comp . END

    END  shift, and go to state 45


State 25

   23 exp: L_PAREN . exp R_PAREN

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 46


State 26

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   22    | MINUS exp .

    $default  reduce using rule 22 (exp)


State 27

   14 relation-expr: L_PAREN bool-expr . R_PAREN

    R_PAREN  shift, and go to state 47


State 28

   13 relation-expr: exp . comp exp
   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   23    | L_PAREN exp . R_PAREN

    MULT     shift, and go to state 37
    DIV      shift, and go to state 38
    PLUS     shift, and go to state 39
    MINUS    shift, and go to state 40
    R_PAREN  shift, and go to state 48
    EQ       shift, and go to state 6
    NEQ      shift, and go to state 7
    LT       shift, and go to state 8
    GT       shift, and go to state 9
    LTE      shift, and go to state 10
    GTE      shift, and go to state 11

    comp  go to state 42


State 29

   12 relation-expr: NOT relation-expr .

    $default  reduce using rule 12 (relation-expr)


State 30

   13 relation-expr: exp . comp exp
   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp

    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40
    EQ     shift, and go to state 6
    NEQ    shift, and go to state 7
    LT     shift, and go to state 8
    GT     shift, and go to state 9
    LTE    shift, and go to state 10
    GTE    shift, and go to state 11

    comp  go to state 42


State 31

   27 var: IDENT L_SQUARE_BRACKET . exp R_SQUARE_BRACKET

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 49


State 32

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   25 term: UMINUS exp .

    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 25 (term)


State 33

   24 term: UMINUS var .

    $default  reduce using rule 24 (term)


State 34

    7 line: bool-expr END .

    $default  reduce using rule 7 (line)


State 35

    9 bool-expr: relation-and-expr AND . relation-and-expr

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NOT      shift, and go to state 5
    TRUE     shift, and go to state 12
    FALSE    shift, and go to state 13
    NUMBER   shift, and go to state 14

    relation-and-expr  go to state 50
    relation-expr      go to state 20
    exp                go to state 30


State 36

   11 relation-and-expr: relation-expr AND . relation-expr

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 4
    NOT      shift, and go to state 5
    TRUE     shift, and go to state 12
    FALSE    shift, and go to state 13
    NUMBER   shift, and go to state 14

    relation-expr  go to state 51
    exp            go to state 30


State 37

   20 exp: exp MULT . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 52


State 38

   21 exp: exp DIV . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 53


State 39

   18 exp: exp PLUS . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 54


State 40

   19 exp: exp MINUS . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 55


State 41

    3 line: exp EQUAL . END

    END  shift, and go to state 56


State 42

   13 relation-expr: exp comp . exp

    MINUS    shift, and go to state 3
    L_PAREN  shift, and go to state 25
    NUMBER   shift, and go to state 14

    exp  go to state 57


State 43

    5 line: term END .

    $default  reduce using rule 5 (line)


State 44

    4 line: var END .

    $default  reduce using rule 4 (line)


State 45

    6 line: comp END .

    $default  reduce using rule 6 (line)


State 46

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   23    | L_PAREN exp . R_PAREN

    MULT     shift, and go to state 37
    DIV      shift, and go to state 38
    PLUS     shift, and go to state 39
    MINUS    shift, and go to state 40
    R_PAREN  shift, and go to state 48


State 47

   14 relation-expr: L_PAREN bool-expr R_PAREN .

    $default  reduce using rule 14 (relation-expr)


State 48

   23 exp: L_PAREN exp R_PAREN .

    $default  reduce using rule 23 (exp)


State 49

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   27 var: IDENT L_SQUARE_BRACKET exp . R_SQUARE_BRACKET

    MULT              shift, and go to state 37
    DIV               shift, and go to state 38
    PLUS              shift, and go to state 39
    MINUS             shift, and go to state 40
    R_SQUARE_BRACKET  shift, and go to state 58


State 50

    9 bool-expr: relation-and-expr AND relation-and-expr .

    $default  reduce using rule 9 (bool-expr)


State 51

   11 relation-and-expr: relation-expr AND relation-expr .

    $default  reduce using rule 11 (relation-and-expr)


State 52

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   20    | exp MULT exp .
   21    | exp . DIV exp

    $default  reduce using rule 20 (exp)


State 53

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp
   21    | exp DIV exp .

    $default  reduce using rule 21 (exp)


State 54

   18 exp: exp . PLUS exp
   18    | exp PLUS exp .
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp

    MULT  shift, and go to state 37
    DIV   shift, and go to state 38

    $default  reduce using rule 18 (exp)


State 55

   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   19    | exp MINUS exp .
   20    | exp . MULT exp
   21    | exp . DIV exp

    MULT  shift, and go to state 37
    DIV   shift, and go to state 38

    $default  reduce using rule 19 (exp)


State 56

    3 line: exp EQUAL END .

    $default  reduce using rule 3 (line)


State 57

   13 relation-expr: exp comp exp .
   18 exp: exp . PLUS exp
   19    | exp . MINUS exp
   20    | exp . MULT exp
   21    | exp . DIV exp

    MULT   shift, and go to state 37
    DIV    shift, and go to state 38
    PLUS   shift, and go to state 39
    MINUS  shift, and go to state 40

    $default  reduce using rule 13 (relation-expr)


State 58

   27 var: IDENT L_SQUARE_BRACKET exp R_SQUARE_BRACKET .

    $default  reduce using rule 27 (var)
